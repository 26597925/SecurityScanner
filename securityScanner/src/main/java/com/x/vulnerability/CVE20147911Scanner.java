package com.x.vulnerability;

import java.io.File;
import java.util.HashSet;
import java.util.Iterator;

import android.content.Context;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.util.Log;

import com.x.util.Constants;
import com.x.util.DexLoader.DexLoaderCallback;
import com.x.util.IScanner;
/**
 * CVE_2014_7911 description: 
 * <p>luni/src/main/java/java/io/ObjectInputStream.java in the java.io.ObjectInputStream implementation in Android before 5.0.0 does not verify that deserialization will result in an object that met the requirements for serialization, which allows attackers to execute arbitrary code via a crafted finalize method for a serialized object in an ArrayMap Parcel within an intent sent to system_service, as demonstrated by the finalize method of android.os.BinderProxy, aka Bug 15874291.	
 * @author ouhf1
 */
public class CVE20147911Scanner implements IScanner<HashSet<String>> {

	//represents what we are interested
	private static String TARGET1 = "/system/framework/core_libart.jar";
	private static String TARGET2 = "/system/framework/core.jar";
	
	@Override
	public void onScanFinished(Loader<HashSet<String>> loader,
			HashSet<String> data) {
		Log.i(TAG, "OnDexfileLoadFinished");
		mFind = false;
		Iterator<String> iter = data.iterator();
		while(iter.hasNext()) {
			String s = iter.next();
			if(s.contains("checkAndGetTcObjectClass")) {
				mFind = true;
				break;
			}
		}

		Message msg = new Message();
		msg.what = Constants.VULN_TYPE_CVE_2014_7911;
		if(mFind) {
			msg.arg1 = 0;
		} else {
			msg.arg1 = 1;
		}

		mHandler.sendMessage(msg);

	}

	private static String TAG = "CVE20147911";
	private Context mContext;
	//private PackageManager mPackageManager;
	private LoaderManager mLoaderManager;
	private Handler mHandler;
	private boolean mFind = false;

	public CVE20147911Scanner(Context context, LoaderManager lm, Handler handler) {
		mContext = context;
		//mPackageManager = pm;
		mLoaderManager = lm;
		mHandler = handler;
	}

	@Override
	public void start() {
		init();
	}

	private void init() {

		if(Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
			Message msg = new Message();
			msg.what = Constants.VULN_TYPE_CVE_2014_7911;
			msg.arg1 = 0;
			mHandler.sendMessage(msg);
			return;
		}

		String apkPath = TARGET1;
		if(! new File(apkPath).exists()) {
			apkPath = TARGET2;
		}
		
		if(! new File(TARGET2).exists()) {
			Message msg = new Message();
			msg.what = Constants.VULN_TYPE_CVE_2014_7911;
			msg.arg1 = 0;
			mHandler.sendMessage(msg);
			return;
		}
		
		Log.i(TAG, "Package [core_libart] apk file path : " + apkPath);
		DexLoaderCallback callback = new DexLoaderCallback(mContext,apkPath,null,Constants.PARSE_CLASS,this);
		mLoaderManager.initLoader(callback.hashCode(), null, callback);
	}

}
