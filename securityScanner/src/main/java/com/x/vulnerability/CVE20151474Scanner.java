package com.x.vulnerability;

import java.util.HashSet;
import java.util.Iterator;

import android.content.Context;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.util.Log;

import com.x.util.Constants;
import com.x.util.IScanner;
import com.x.util.SoLoader.SoLoaderCallback;
/**
 * CVE_2015_1474 description: 
 * <p>Multiple integer overflows in the GraphicBuffer::unflatten function in platform/frameworks/native/libs/ui/GraphicBuffer.cpp in Android through 5.0 allow attackers to gain privileges or cause a denial of service (memory corruption) via vectors that trigger a large number of (1) file descriptors or (2) integer values.
 * @author ouhf1
 */
public class CVE20151474Scanner implements IScanner<HashSet<String>>  {

	//represents what we are interested
	private static String TARGET = "/system/lib/libui.so";
	
	@Override
	public void onScanFinished(Loader<HashSet<String>> loader, HashSet<String> data) {
		Log.i(TAG, "OnSoFileLoadFinished");
		mFind = false;
		
		Iterator<String> iter = data.iterator();
		while(iter.hasNext()) {
			String s = iter.next();
			if(s.contains("unflatten: numFds or numInts is too large: %d, %d")) {
				mFind = true;
				break;
			}
		}
		
		Message msg = new Message();
		msg.what = Constants.VULN_TYPE_CVE_2015_1474;
		if(mFind) {
			msg.arg1 = 0;
		} else {
			msg.arg1 = 1;
		}
		mHandler.sendMessage(msg);
	}

	private static String TAG = "CVE20151474";
	private Context mContext;
	private LoaderManager mLoaderManager;
	private Handler mHandler;
	private boolean mFind = false;

	public CVE20151474Scanner(Context context, LoaderManager lm, Handler handler) {
		mContext = context;
		//mPackageManager = pm;
		mLoaderManager = lm;
		mHandler = handler;
	}

	@Override
	public void start() {
		init();
	}

	private void init() {
		Message msg = new Message();
		msg.what = Constants.VULN_TYPE_CVE_2015_1474;
		if(Build.VERSION.SDK_INT != android.os.Build.VERSION_CODES.LOLLIPOP) {
			msg.arg1 = 0;
			mHandler.sendMessage(msg);
			return;
		}
		
		String soFilePath = TARGET;
		Log.i(TAG, "[libui.so] file path : " + soFilePath);
		SoLoaderCallback callback = new SoLoaderCallback(mContext, soFilePath,this);
		mLoaderManager.initLoader(callback.hashCode(), null, callback);
	}
}
